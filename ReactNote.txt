+Parameter that get passed into useState() is used as initial value of the state.
Example: const [number, setNumber] = useState("1"); => This will make it so that number's initial value is 1.


+To set inline style, use style={{attribute: "<value>"}}


+To create a responisve col in container, use breakpoint on each col.
Example:
<Row>
   <Col xs = {{order:"last"}} md={{span: 8, order:"last"}} lg={{span: "auto", order: "first"}}>Hahahaha</Col> // Make sure to give value to each breakpoint, example on xs and md order is set to "Last" to move the colum to the last area but in lg the order is set to first to prevent md and xs order being used despite of still in large screen.
   <Col md={4} lg={"auto"}>Yahooo</Col>
   <Col md={4} lg={"auto"}>ORAORAORAORA</Col>
</Row>


+Use array join to split all array into string. You can enter customized seperator by giving join an parameter.
Example:
//array j has [noita, gundam, gumblar] as value.
const text = j.join(", "); => text will contain string noita, gundam, gumblar.


+To get value from a Form, use useState() and do this: //This is for BOOTSTRAP!
<form onSubmit={ e => {submit(e)}}>
  <Form.Control 
	type="text" 
	placeholder="Enter pokemon ability... (ex: Stench)" 
	value={pokesearch} //get the value of the first useState object.
	onChange={(e)=>{setPokesearch(pokesearch = e.target.value)}}> //use onChange() to store the value to first useState object using useState setter to store input value;
   </Form.Control>
</form>

+JSX does not accept for, instead you can make empty array and then use fill to fill it with nothing. Then loop throught it using map with (_, i) as parameter. Also don't forget to assign key to each object.

+In array map, you can use _ to give empty parameter

Example: {Array(5).fill(' ').map((_, i)=>{return <Item key={i} />}) // (_, i) mean we will take i as index of each array and _ mean empty. key={i} mean we use the array index as key for our object.


+Use useRef() if you want to access height/width of an element, more info in here https://thewebdev.info/2021/09/18/how-to-get-the-height-of-an-element-with-react/

+In page where you had to fetch first before rendering start, make an 'loading' use state and set it to true. Change the state of 'loading' into false after finished fetching. In JSX, create an conditional rendering where web will render 'Loading' component when loading is set to true and render the true web when 'loading' state set to false.
Example:

const [loading, setLoading] = useState(true);

const fetchSomething = () => {
	const response = await fetch("some-API-here");
	//blahblahblah
	setLoading(false)
}

useEffect(()=>{
	fetchSomething();
},[]);

return(
        <Stack minH={"100vh"} backgroundColor={"gray.100"} spacing={"18px"} >
        {
            loading? 

            <Spinner pos={"absolute"} top={"50%"} left={"50%"} size={"xl"} /> //Placeholder element to show when busy loading.

            :

            <>
                //True element here.
            </>
        }   
        </Stack>     
);


+Async is weird in React, moreso when dealing with array. Avoid using two useEffect that rely on 1 array, or rely on another array in diffrent useEffect. If possible, make it so that all async function that rely on each other is grouped into one high level async function.
Example:
setAnimals([...animals, { type: "Sparrow" }]) //This will add new element to array Animals

+When comparing string, don't use !string === comparedString, instead use string !== comparedString.

+To force the react router <Link> to reload page, add reloadDocument as props.
Example:
<Link 
    as={ReactLink} 
    to={"/item/"+props.id}
    reloadDocument //Add this.
>

+Don't use setState inside a loop, this will cause a nasty bug.

+When using array.map or filter, remember to return the element.
Example:

const exampleFunc = () => {
	exampleArray = exampleSourceArray.map((element)=>{
		//do something with the element here
		return element // <- THIS IS IMPORTANT! Otherwise you will get undefined for your array element
	})
}

+Multiple Contex values should always be object, never turn it into array

+Use Promise.all when trying to do async operation inside a map to wait until all promise is resolved before using it to make array
Example:

const newArray = await Promise.all(oldArray.map(async (element) => {
                //Do thing here

                return element;
			}
		)
	)

+For chakra-ui, you can modifiy alert dialogue and modal by adding align-self to <AlertContent> and <ModalContent>
Example:

<AlertDialog
        isOpen={isOpen}
        leastDestructiveRef={cancelRef}
        onClose={onClose}
      >
        <AlertDialogOverlay>
          <AlertDialogContent
            alignSelf={"center"}
          > //Modifiy this one.
            <AlertDialogHeader fontSize='lg' fontWeight='bold'>
              Hapus Barang
            </AlertDialogHeader>

            <AlertDialogBody>
              Hapus barang dari keranjang belanja?
            </AlertDialogBody>

            <AlertDialogFooter>
              <Button ref={cancelRef} onClick={onClose}>
                Cancel
              </Button>
              <Button colorScheme='red' onClick={removeItemHandler} ml={3}>
                Hapus
              </Button>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialogOverlay>
      </AlertDialog>
    </>
	
+For useQuery, if you want to save fetched data as state for some reason:
    const { data, status } = useQuery(["items"], fetchItems, {
        onSuccess: (data) => {
            setItems(data.products);
        }
    });

+To access local hosted api, use "http://192.168.1.<Your IP>:<Api Port>/<Api Endpoint>";
Example: http://192.168.1.24:3001/products

+Browser will not send cookies unless you set the credential to 'include' in fetch api option.
+Make sure the request header is set into "application/json" when sending data using JSON.
Example:
return await fetchApi("http://192.168.1.24:3001/login", {
            credentials: 'include', //Also send cookies
            headers: {
                'Content-Type': 'application/json'
            },
            method: "POST",
            body: JSON.stringtify(text)
})

+When enabled is set to false in react query, the queries won't run.
Example:
const userId = user?.id ? true : false

// Then get the user's projects
const { status, fetchStatus, data: projects } = useQuery(
  ['projects', userId],
  getProjectsByUser,
  {
    // Query won't be run if userId is false
    enabled: userId, 
  }
)

+However, their status will be set to 'loading' which mean you will get stuck with loading screen if you use "status==='loading'" to check if query is still fetching, instead use "fetchStatus==='fetching'".
Example:
const userId = user?.id ? true : false

// Then get the user's projects
const { status, fetchStatus, data: projects } = useQuery(
  ['projects', userId],
  getProjectsByUser,
  {
    // Query won't be run if userId is false
    enabled: userId, 
  }
)

return({
	fetchStatus === 'fetching' ?
		<Load>
	:
		<NormalView>
})

+You can also use alias on destructed object by doing this: { data : newDataAllias } = object //data can be accessed with newDataAllias.

+Promise and array.reduce() did not mix well. AVOID USING ARRAY.REDUCE() WITH PROMISE!

+FormControl should be used to only wrap a single input.
Example
<form>
	<FormControl>
		<Input type={"email"} placeholder={"This is for email"} />
	</FormControl>
	<FormControl>
		<Input type={"password"} placeholder={"This is for password"} />
	</FormControl>
</form>

+To make an element stick to the bottom of a page, use postion "sticky" with bottom and left set to 0 //WARNING: I am not sure why this is working.
Example:
<HStack bgColor={"white"} padding={"5px"} position={"sticky"} bottom={"0px"} left={"0px"} width={"100vw"}>
	<Button borderRadius={"0px"} colorScheme={"green"} flexGrow={"2"}>Beli</Button>
	<Flex justify={"center"} ><ActionIcon icon={<MessageSquare />}/></Flex>
</HStack>


+Don't use VW for min width or max width if there is a vertical scroll. It will cause an overflow. Instead use 100% for min or max width. This is because VW also include scroll.

+When using useMutation to update a data, it better to use setQuery or setQueries to update data in client instead of refetching everything. It better to do this in onSuccess or onError.
Example:
queryClient.setQueriesData(["item"+data.id], newItemDetail); // You will also need to use useQueryClient. ALSO THE NEW DATA MUST MATCH THE OLD DATA.

+It better to use useQueries instead for multiple query instead of bundling them all in a single promise so that when you update you can also update the old fetched data.
Example:
const detailedItems = useQueries({
        queries: items? items.table_cart_barang.map((item)=>{ //Check if items exist, if not then queries will be empty array.
            return {
                queryKey: ["item"+item.id], //For the key
                queryFn: async ()=>{ //Accept callback
                    const detailedItem = await fetchApi('/products/' + item.id_barang);
                    item.gambar = detailedItem.gambar
                    item.nama = detailedItem.nama;
                    item.stok = detailedItem.stok;
                    item.harga = detailedItem.harga;
                    return item;
                },

                enabled: items?.id > 0 ? true : false, //You can add option here like onSuccess, onError, etc...
            }
        }) : []
    })

const detailedItemsFetchStatus = detailedItems.some(result => result.fetchStatus === "fetching") //Check if any of the member is still fetching.

+Use update instead of patch for updating resource with API.

+Don't use props drilling if the form is deep inside the children, either lift the form's level or make a context. Otherwise you will always lose focus on change.

Example:
function Parent({setSomething}){
	<FormSomething setSomething ={setSomething} />  //Don't do this!
}

function Parent({setSomething}){
	<form>
		<Input onChange={setSomething} />
	</form>
}

+For forwarding ref, if the ref is will be forwarded to diffrent component, rename it to something else midway to prevent error.

Example:
const WrapSearchbarInputRef = React.forwardRef((props, ref)=>{
        return <SearcbarInput innerRef={ref} {...props} /> //And then take the innerRef as props in the SearchbarInput component
})

return(
	<WrapSearchbarInputRef searchText={searchText} defaultValue={searchText} onChange={onTextSearchChangeHandler} ref={searchBarRef} />
)

+Use window.location.href if you want to redirect into the same page but with diffrent query.
Example:

window.location.href = searchText ? "/?nama=" + searchText : "/"; //Will redirect into home page with query, even when user is still in home page.

+In chakra ui, before you can use scale, you had to declare "transform: auto" first as props.

+In chakra ui, remember to use _hover{{}} instead of _hover{"none"}. This also applies to props with _.

+Use useLocation instead of window.location.href for useEffect dependency.

Example:
const location = useLocation();

console.log(location.pathName) // Will print url